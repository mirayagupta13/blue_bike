bikes_in_use_by_season$bikes_in_use = 0
days = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
data = data %>% mutate(day_of_week = wday(starttime, label = TRUE, abbr = FALSE))
bikes_in_use_by_day = expand.grid(day_of_week = days, season = seasons)
bikes_in_use_by_day$bikes_in_use = 0
for (s in seasons) {
for (d in days) {
count = data %>%
filter(season == s, day_of_week == d) %>%
nrow()
bikes_in_use_by_day$bikes_in_use[bikes_in_use_by_day$day_of_week == d & bikes_in_use_by_day$season == s] = count
} }
season_colors <- brewer.pal(4, "Set1")
# Plot bike usage by day of the week and season (bar plot)
ggplot(bikes_in_use_by_day, aes(x = day_of_week, y = bikes_in_use, fill = season)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Bike Usage by Day of the Week and Season",
x = "Day of the Week",
y = "Bikes in Use") +
scale_x_discrete(limits = c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')) +
theme_minimal() +
scale_fill_manual(values = season_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#heatmap of day of week and season
season_colors = brewer.pal(4, "Set1")
ggplot(bikes_in_use_by_day, aes(x = day_of_week, y = season, fill = bikes_in_use)) +
geom_tile() +  # Use tiles for heatmap
labs(title = "Bike Usage by Day of the Week and Season",
x = "Day of the Week",
y = "Season",
fill = "Bikes in Use") +
scale_x_discrete(limits = c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')) +
scale_fill_gradientn(colors = brewer.pal(9, "Reds")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
season_colors <- brewer.pal(4, "Set1")
season_colors <- brewer.pal(4, "Set1")
data_matrix <- matrix(rnorm(7 * 5), nrow = 7, dimnames = list(c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"),
paste0("Col", 1:5)))
# Reorder rows: Move "Sunday" after "Saturday"
new_order <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
data_matrix <- data_matrix[new_order, ]
# Plot bike usage by day of the week and season (bar plot)
ggplot(data_matrix, aes(x = day_of_week, y = bikes_in_use, fill = season)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Bike Usage by Day of the Week and Season",
x = "Day of the Week",
y = "Bikes in Use") +
scale_x_discrete(limits = c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')) +
theme_minimal() +
scale_fill_manual(values = season_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bikes_in_use_by_day
season_colors <- brewer.pal(4, "Set1")
# Plot bike usage by day of the week and season (bar plot)
ggplot(data_matrix, aes(x = day_of_week, y = bikes_in_use, fill = season)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Bike Usage by Day of the Week and Season",
x = "Day of the Week",
y = "Bikes in Use") +
scale_x_discrete(limits = c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')) +
theme_minimal() +
scale_fill_manual(values = season_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bikes_in_use_by_day = expand.grid(day=days())
bikes_in_use_by_season$bikes_in_use = 0
days = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
data = data %>% mutate(day_of_week = wday(starttime, label = TRUE, abbr = FALSE))
bikes_in_use_by_day = expand.grid(day_of_week = days, season = seasons)
bikes_in_use_by_day$bikes_in_use = 0
for (s in seasons) {
for (d in days) {
count = data %>%
filter(season == s, day_of_week == d) %>%
nrow()
bikes_in_use_by_day$bikes_in_use[bikes_in_use_by_day$day_of_week == d & bikes_in_use_by_day$season == s] = count
} }
season_colors <- brewer.pal(4, "Set1")
# Plot bike usage by day of the week and season (bar plot)
ggplot(data_matrix, aes(x = day_of_week, y = bikes_in_use, fill = season)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Bike Usage by Day of the Week and Season",
x = "Day of the Week",
y = "Bikes in Use") +
scale_x_discrete(limits = c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')) +
theme_minimal() +
scale_fill_manual(values = season_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bikes_in_use_by_season
bikes_in_use_by_day
bikes_in_use_by_day = expand.grid(day=days())
bikes_in_use_by_season$bikes_in_use = 0
days = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
data = data %>% mutate(day_of_week = wday(starttime, label = TRUE, abbr = FALSE))
bikes_in_use_by_day = expand.grid(day_of_week = days, season = seasons)
bikes_in_use_by_day$bikes_in_use = 0
for (s in seasons) {
for (d in days) {
count = data %>%
filter(season == s, day_of_week == d) %>%
nrow()
bikes_in_use_by_day$bikes_in_use[bikes_in_use_by_day$day_of_week == d & bikes_in_use_by_day$season == s] = count
} }
season_colors <- brewer.pal(4, "Set1")
# Plot bike usage by day of the week and season (bar plot)
ggplot(bikes_in_use_by_day, aes(x = day_of_week, y = bikes_in_use, fill = season)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Bike Usage by Day of the Week and Season",
x = "Day of the Week",
y = "Bikes in Use") +
scale_x_discrete(limits = c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')) +
theme_minimal() +
scale_fill_manual(values = season_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#heatmap of day of week and season
season_colors = brewer.pal(4, "Set1")
ggplot(bikes_in_use_by_day, aes(x = day_of_week, y = season, fill = bikes_in_use)) +
geom_tile() +  # Use tiles for heatmap
labs(title = "Bike Usage by Day of the Week and Season",
x = "Day of the Week",
y = "Season",
fill = "Bikes in Use") +
scale_x_discrete(limits = c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')) +
scale_fill_gradientn(colors = brewer.pal(9, "Reds")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#heatmap of day of week and season
season_colors = brewer.pal(4, "Set1")
ggplot(bikes_in_use_by_day, aes(x = day_of_week, y = season, fill = bikes_in_use)) +
geom_tile() +  # Use tiles for heatmap
labs(title = "Bike Usage by Day of the Week and Season",
x = "",
y = "",
fill = "Bikes in Use") +
scale_x_discrete(limits = c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')) +
scale_fill_gradientn(colors = brewer.pal(9, "Reds")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#heatmap of day of week and season
season_colors = brewer.pal(4, "Set1")
ggplot(bikes_in_use_by_day, aes(x = day_of_week, y = season, fill = bikes_in_use)) +
geom_tile() +  # Use tiles for heatmap
labs(title = "Bike Usage by Day of the Week (Column Scaled)",
x = "",
y = "",
fill = "Bikes in Use") +
scale_x_discrete(limits = c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')) +
scale_fill_gradientn(colors = brewer.pal(9, "Reds")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#base R heatmap
palette = colorRampPalette(brewer.pal(9, "Reds"))(100)
heatmap_data = reshape(bikes_in_use_by_day,
idvar = "season",
timevar = "day_of_week",
direction = "wide")
sunday = heatmap_data[,2]
heatmap_data_ordered = cbind(heatmap_data[,-2], sunday)
rownames(heatmap_data) = heatmap_data$season
colnames(heatmap_data) <- c("season", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
heatmap_matrix = as.matrix(heatmap_data[, -1])
# Create heatmap with row-wise scaling
heatmap(heatmap_matrix,
scale = "row",
Colv = NA,
Rowv = NA,
col = colorRampPalette(c("lemonchiffon", "orange", "red"))(100),
main = "",
cexRow = 0.8,
cexCol = 0.8,
margins = c(8, 8))
title("Bike Usage by Day of the Week (Row-Scaled)", cex.main = 1, adj = 0.3, line = 3)
heatmap_data
#base R heatmap
palette = colorRampPalette(brewer.pal(9, "Reds"))(100)
heatmap_data = reshape(bikes_in_use_by_day,
idvar = "season",
timevar = "day_of_week",
direction = "wide")
sunday = heatmap_data[,2]
heatmap_data_ordered = cbind(heatmap_data[,-2], sunday)
rownames(heatmap_data) = heatmap_data$season
colnames(heatmap_data) <- c("season", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
heatmap_matrix = as.matrix(heatmap_data[, -1])
# Create heatmap with row-wise scaling
heatmap(heatmap_matrix,
#scale = "row",
Colv = NA,
Rowv = NA,
col = palette,
main = "",
cexRow = 0.8,
cexCol = 0.8,
margins = c(8, 8))
title("Bike Usage by Day of the Week (Row-Scaled)", cex.main = 1, adj = 0.3, line = 3)
#heatmap of day of week and season
season_colors = brewer.pal(4, "Set1")
ggplot(bikes_in_use_by_day, aes(x = day_of_week, y = season, fill = bikes_in_use)) +
geom_tile() +  # Use tiles for heatmap
labs(title = "Bike Usage by Day of the Week (Column Scaled)",
x = "",
y = "",
fill = "Bikes in Use") +
scale_x_discrete(limits = c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')) +
scale_y_discrete(limits = c('Summer', 'Fall', 'Winter', 'Spring')) +
scale_fill_gradientn(colors = brewer.pal(9, "Reds")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
heatmap_data = reshape(bikes_in_use_by_day,
idvar = "season",
timevar = "day_of_week",
direction = "wide")
heatmap_data
colnames(heatmap_data) <- c("season", 'Sun', "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")
sunday = heatmap_data[,2]
sunday
heatmap_data_ordered = cbind(heatmap_data[,-2], sunday)
heatmap_data_ordered
spring = heatmap_data_ordered[,2]
summer = heatmap_data_ordered[,4]
winter = heatmap_data_ordered[,4]
summer = heatmap_data_ordered[,3]
fall = heatmap_data_ordered[,1]
fall
summer = heatmap_data_ordered[,4]
summer
heatmap_matrix
#base R heatmap
palette = colorRampPalette(brewer.pal(9, "Reds"))(100)
heatmap_data = reshape(bikes_in_use_by_day,
idvar = "season",
timevar = "day_of_week",
direction = "wide")
colnames(heatmap_data) <- c("season", 'Sun', "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")
sunday = heatmap_data[,2]
heatmap_data_ordered = cbind(heatmap_data[,-2], sunday)
rownames(heatmap_data) = heatmap_data$season
heatmap_matrix = as.matrix(heatmap_data[, -1])
x <- c("Summer", "Fall", "Winter", "Spring")
heatmap_matrix %>%
mutate(season =  factor(season, levels = x)) %>%
arrange(season)
heatmap_matrix
heatmap_matrix[1,]
fall = heatmap_matrix[1,]
spring = heatmap_matrix[2,]
summer = heatmap_matrix[3,]
winter = heatmap_matrix[4,]
cbind(summer, fall, winter, spring)
t(cbind(summer, fall, winter, spring))
heatmap_matrix
#base R heatmap
palette = colorRampPalette(brewer.pal(9, "Reds"))(100)
heatmap_data = reshape(bikes_in_use_by_day,
idvar = "season",
timevar = "day_of_week",
direction = "wide")
colnames(heatmap_data) <- c("season", 'Sun', "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")
sunday = heatmap_data[,2]
heatmap_data_ordered = cbind(heatmap_data[,-2], sunday)
rownames(heatmap_data) = heatmap_data$season
heatmap_matrix = as.matrix(heatmap_data[, -1])
fall = heatmap_matrix[1,]
spring = heatmap_matrix[2,]
summer = heatmap_matrix[3,]
winter = heatmap_matrix[4,]
heat_mat = t(cbind(summer, fall, winter, spring))
# Create heatmap with row-wise scaling
heatmap(heatmap_matrix,
#scale = "row",
Colv = NA,
Rowv = NA,
col = palette,
main = "",
cexRow = 0.8,
cexCol = 0.8,
margins = c(8, 8))
title("Bike Usage by Day of the Week (Row-Scaled)", cex.main = 1, adj = 0.3, line = 3)
heat_mat
#base R heatmap
palette = colorRampPalette(brewer.pal(9, "Reds"))(100)
heatmap_data = reshape(bikes_in_use_by_day,
idvar = "season",
timevar = "day_of_week",
direction = "wide")
sunday = heatmap_data[,2]
heatmap_data_ordered = cbind(heatmap_data[,-2], sunday)
colnames(heatmap_data) <- c("season", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", 'Sun')
rownames(heatmap_data) = heatmap_data$season
heatmap_matrix = as.matrix(heatmap_data[, -1])
fall = heatmap_matrix[1,]
spring = heatmap_matrix[2,]
summer = heatmap_matrix[3,]
winter = heatmap_matrix[4,]
heat_mat = t(cbind(summer, fall, winter, spring))
# Create heatmap with row-wise scaling
heatmap(heatmap_matrix,
#scale = "row",
Colv = NA,
Rowv = NA,
col = palette,
main = "",
cexRow = 0.8,
cexCol = 0.8,
margins = c(8, 8))
title("Bike Usage by Day of the Week (Row-Scaled)", cex.main = 1, adj = 0.3, line = 3)
heatmap_data
#heatmap of day of week and time of day (morning, afternoon, evening)
ggplot(bikes_in_use_by_season, aes(x = hour, y = season, fill = bikes_in_use)) +
geom_tile() +
scale_fill_gradientn(colors = brewer.pal(9, "Blues")) +
labs(
title = "Number of Bikes in Use at Each Hour by Season",
x = "Time of Day",
y = "Season",
fill = "Bikes in Use"
) +
scale_x_continuous(
breaks = seq(0, 23, by = 4),
labels = format(strptime(seq(0, 23, by = 4), format = "%H"), "%I:%M %p")
) +
scale_y_discrete(limits = c('Summer', 'Fall', 'Winter', 'Spring')) +  # Order the seasons
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#heatmap of day of week and time of day (morning, afternoon, evening)
ggplot(bikes_in_use_by_season, aes(x = hour, y = season, fill = bikes_in_use)) +
geom_tile() +
scale_fill_gradientn(colors = brewer.pal(9, "Blues")) +
labs(
title = "Number of Bikes in Use at Each Hour by Season",
x = "Time of Day",
y = "Season",
fill = "Bikes in Use"
) +
scale_x_continuous(
breaks = seq(0, 23, by = 4),
labels = format(strptime(seq(0, 23, by = 4), format = "%H"), "%I:%M %p")
) +
scale_y_discrete(limits = c('Fall', 'Spring', 'Summer', 'Winter')) +  # Order the seasons
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bikes_in_use_by_season
hours = 0:23
seasons = unique(data$season)
bikes_in_use_by_season = expand.grid(hour=hours, season=seasons)
bikes_in_use_by_season$bikes_in_use = 0
for (s in seasons) {
for (h in hours) {
count = data %>%
filter(season == s, hour(starttime) <= h & hour(stoptime) >= h) %>%
nrow()
bikes_in_use_by_season$bikes_in_use[bikes_in_use_by_season$hour == h & bikes_in_use_by_season$season == s] = count
}
}
bikes_in_use_by_season
knitr::opts_chunk$set(echo = TRUE)
#including packages
library(dplyr)
library(purrr)
library(readr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(plotly)
library(scales)
library(sinaplot)
library(RColorBrewer)
library(scales)
library(ggridges)
library(leaflet)
setwd('/Users/mirayagupta/Desktop/DS104/bb2023')
csv_file_list = dir()
csv_file_list
df_list = map(csv_file_list, read_csv)
data = bind_rows(df_list)
dim(data)
colnames(data)
sum(is.na(data$tripduration)) #less than 10% of data
sum(is.na(data$`start station id`)) #less than 10% of data
sum(is.na(data$`end_lat`))
# Get row indices where cols are NA
no_tripdur_indices = which(is.na(data$tripduration))
no_startid_indices = which(is.na(data$`start station id`))
identical(no_tripdur_indices, no_startid_indices)
# Drop these rows
data = data %>% slice(-no_tripdur_indices)
sum(is.na(data$tripduration))
#check if i can impute was it a cwrtain month?
sum(is.na(data$bikeid)) #no missing values
length(unique(data$bikeid)) #5005
dim(data) # 2999792
range(data$bikeid)
data$tripduration = data$tripduration / 60 #converting sec to min
data$month = month(data$starttime)
data$day_of_week = wday(data$starttime)
data = data %>%
mutate(season = case_when(
month %in% c(12, 1, 2) ~ "Winter",
month %in% c(3, 4, 5) ~ "Spring",
month %in% c(6, 7, 8) ~ "Summer",
month %in% c(9, 10, 11) ~ "Fall"))
#simplified metric, not showing how many bikes are in use at any point in time but how many rides were started in that hour
data = data[, !names(data) %in% "---"]
data = data %>%
mutate(
starttime = ymd_hms(starttime),
stoptime = ymd_hms(stoptime)
)
data$starthour = hour(data$starttime)
data$startday = as.Date(data$starttime)
time_frame = seq(from = ymd_hms('2023-03-01 00:00:00'),
to = ymd_hms('2023-03-01 23:59:59'),
by = 'hour')
bikes_in_use = data.frame(time = time_frame, bikes_in_use = 0)
for (i in 1:nrow(bikes_in_use)) {
count = nrow(data %>%
filter(starttime <= bikes_in_use$time[i] & stoptime >= bikes_in_use$time[i]))
bikes_in_use$bikes_in_use[i] = count
}
# Print the results
print(bikes_in_use)
plot(bikes_in_use$time, bikes_in_use$bikes_in_use, main='Number of bikes in use at every hour, Mar 1 2023')
hourly_bike_usage = data.frame(hour = 0:23, avg_bikes_in_use = 0, med_bikes_in_use = 0, month = 0, day = 0, count_electric = 0)
for (h in 0:23) {
# Filter data by hour
count_per_hour = data %>%
filter(hour(starttime) <= h & hour(stoptime) >= h) %>%
summarise(avg_bikes = mean(n()))
#QUESTION: IS AVERAGE THE BEST SUMMARY STATISTIC TO USE HERE?
hourly_bike_usage$avg_bikes_in_use[h + 1] = count_per_hour$avg_bikes
}
hours = 0:23
seasons = unique(data$season)
bikes_in_use_by_season = expand.grid(hour=hours, season=seasons)
bikes_in_use_by_season$bikes_in_use = 0
for (s in seasons) {
for (h in hours) {
count = data %>%
filter(season == s, hour(starttime) <= h & hour(stoptime) >= h) %>%
nrow()
bikes_in_use_by_season$bikes_in_use[bikes_in_use_by_season$hour == h & bikes_in_use_by_season$season == s] = count
}
}
#heatmap of day of week and time of day (morning, afternoon, evening)
ggplot(bikes_in_use_by_season, aes(x = hour, y = season, fill = bikes_in_use)) +
geom_tile() +
scale_fill_gradientn(colors = brewer.pal(9, "Blues")) +
labs(
title = "Number of Bikes in Use at Each Hour by Season",
x = "Time of Day",
y = "Season",
fill = "Bikes in Use"
) +
scale_x_continuous(
breaks = seq(0, 23, by = 4),
labels = format(strptime(seq(0, 23, by = 4), format = "%H"), "%I:%M %p")
) +
scale_y_discrete(limits = c('Fall', 'Spring', 'Summer', 'Winter')) +  # Order the seasons
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
```{r}
#heatmap of day of week and time of day (morning, afternoon, evening)
ggplot(bikes_in_use_by_season, aes(x = hour, y = day_of_week, fill = bikes_in_use)) +
geom_tile() +
scale_fill_gradientn(colors = brewer.pal(9, "Blues")) +
labs(
title = "Number of Bikes in Use at Each Hour by Season",
x = "Time of Day",
y = "Season",
fill = "Bikes in Use"
) +
scale_x_continuous(
breaks = seq(0, 23, by = 4),
labels = format(strptime(seq(0, 23, by = 4), format = "%H"), "%I:%M %p")
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#heatmap of day of week and time of day (morning, afternoon, evening)
ggplot(bikes_in_use_by_day, aes(x = hour, y = day_of_week, fill = bikes_in_use)) +
geom_tile() +
scale_fill_gradientn(colors = brewer.pal(9, "Blues")) +
labs(
title = "Number of Bikes in Use at Each Hour by Season",
x = "Time of Day",
y = "Season",
fill = "Bikes in Use"
) +
scale_x_continuous(
breaks = seq(0, 23, by = 4),
labels = format(strptime(seq(0, 23, by = 4), format = "%H"), "%I:%M %p")
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bikes_in_use_by_day
#heatmap of day of week and time of day (morning, afternoon, evening)
ggplot(bikes_in_use_by_season, aes(x = hour, y = season, fill = bikes_in_use)) +
geom_tile() +
scale_fill_gradientn(colors = brewer.pal(9, "Blues")) +
labs(
title = "Number of Bikes in Use at Each Hour by Season",
x = "",
y = "",
fill = "Bikes in Use"
) +
scale_x_continuous(
breaks = seq(0, 23, by = 4),
labels = format(strptime(seq(0, 23, by = 4), format = "%H"), "%I:%M %p")
) +
scale_y_discrete(limits = c('Fall', 'Spring', 'Summer', 'Winter')) +  # Order the seasons
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
